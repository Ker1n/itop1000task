{"version":3,"sources":["Components/Timer/Timer.js","App.js","index.js"],"names":["Timer","React","useState","time","setTime","timerOn","setTimerOn","doubleClickButton","useRef","useEffect","interval","click","fromEvent","current","setInterval","prevTime","clearInterval","pipe","buffer","debounceTime","map","clicks","length","filter","clicksLength","subscribe","_","unsubscribe","className","Math","floor","slice","onClick","ref","App","render","document","getElementById"],"mappings":"gPAIaA,EAAQ,WAAO,IAAD,EACDC,IAAMC,SAAS,GADd,mBAClBC,EADkB,KACZC,EADY,OAEKH,IAAMC,UAAS,GAFpB,mBAElBG,EAFkB,KAETC,EAFS,KAGnBC,EAAoBN,IAAMO,OAAO,MAEvCP,IAAMQ,WAAU,WACd,IAAIC,EAAW,KACTC,EAAQC,YAAUL,EAAkBM,QAAS,SAmBnD,OAjBIR,EACFK,EAAWI,aAAY,WACrBV,GAAQ,SAACW,GAAD,OAAcA,EAAW,QAChC,IACOV,GACVW,cAAcN,GAGIC,EAAMM,KACxBC,YAAOP,EAAMM,KAAKE,YAAa,OAC/BC,aAAI,SAACC,GAAD,OAAYA,EAAOC,UACvBC,aAAO,SAACC,GAAD,OAAkBA,GAAgB,MAE/BC,WAAU,SAACC,GACrBpB,GAAW,MAGN,kBAAMU,cAAcN,IAAaC,EAAMgB,iBAC7C,CAACtB,IAOJ,OACE,qBAAKuB,UAAU,SAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,kCAAQ,IAAMC,KAAKC,MAAO3B,EAAO,KAAW,KAAK4B,OAAO,GAAxD,OACA,kCAAQ,IAAMF,KAAKC,MAAO3B,EAAO,IAAS,KAAK4B,OAAO,GAAtD,OACA,gCAAQ,IAAMF,KAAKC,MAAO3B,EAAO,IAAQ,KAAK4B,OAAO,QAEvD,sBAAKH,UAAU,kBAAf,UACGvB,EACC,qBAAKuB,UAAU,MAAMI,QAAS,kBAdtC5B,EAAQ,QACRE,GAAW,IAaH,kBAIA,qBAAKsB,UAAU,MAAMI,QAAS,kBAAM1B,GAAW,IAA/C,mBAIF,qBAAKsB,UAAU,MAAMI,QAAS,kBAAM5B,EAAQ,IAA5C,mBAGA,qBAAKwB,UAAU,MAAMK,IAAK1B,EAA1B,2BCxDG2B,EAAM,kBAAO,cAAC,EAAD,KCE1BC,iBAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f5b60f53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { fromEvent } from \"rxjs\";\r\nimport { map, buffer, debounceTime, filter } from \"rxjs/operators\";\r\n\r\nexport const Timer = () => {\r\n  const [time, setTime] = React.useState(0);\r\n  const [timerOn, setTimerOn] = React.useState(false);\r\n  const doubleClickButton = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    let interval = null;\r\n    const click = fromEvent(doubleClickButton.current, \"click\");\r\n\r\n    if (timerOn) {\r\n      interval = setInterval(() => {\r\n        setTime((prevTime) => prevTime + 10);\r\n      }, 10);\r\n    } else if (!timerOn) {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    const doubleClick = click.pipe(\r\n      buffer(click.pipe(debounceTime(300))),\r\n      map((clicks) => clicks.length),\r\n      filter((clicksLength) => clicksLength >= 2)\r\n    );\r\n    doubleClick.subscribe((_) => {\r\n      setTimerOn(false);\r\n    });\r\n\r\n    return () => clearInterval(interval) && click.unsubscribe();\r\n  }, [timerOn]);\r\n\r\n  const stop = () => {\r\n    setTime(0);\r\n    setTimerOn(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"timers\">\r\n      <div className=\"timers__container\">\r\n        <div className=\"time\">\r\n          <span>{(\"0\" + Math.floor((time / 3600000) % 60)).slice(-2)}:</span>\r\n          <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\r\n          <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}</span>\r\n        </div>\r\n        <div className=\"timers__buttons\">\r\n          {timerOn ? (\r\n            <div className=\"btn\" onClick={() => stop()}>\r\n              Stop\r\n            </div>\r\n          ) : (\r\n            <div className=\"btn\" onClick={() => setTimerOn(true)}>\r\n              Start\r\n            </div>\r\n          )}\r\n          <div className=\"btn\" onClick={() => setTime(0)}>\r\n            Reset\r\n          </div>\r\n          <div className=\"btn\" ref={doubleClickButton}>\r\n            Wait\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Timer } from \"./Components/Timer/Timer\";\n\nexport const App = () => (<Timer />);\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport './index.css'\nimport { App } from \"./App\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}